'''Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n-1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n-1)	 	1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.'''

def generateTriangleNumbers(nTerms):
    triangleNumbers = []
    for n in range(1, nTerms + 1):
        triangleNumbers.append(int(n * (n + 1) / 2))
    return triangleNumbers

def generatePentagonalNumbers(maxSize):
    pentagonalNumbers = []
    n = 1
    maxTerm = 0
    number = int(n * (3 * n - 1) / 2)
    while maxTerm < maxSize + 1:
        pentagonalNumbers.append(number)
        n += 1
        number = int(n * (3 * n - 1) / 2)
        maxTerm = number
    return pentagonalNumbers

def generateHexagonalNumbers(maxSize):
    hexagonalNumbers = []
    n = 1
    maxTerm = 0
    number = int(n * (n + 1) / 2)
    while maxTerm < maxSize + 1:
        hexagonalNumbers.append(number)
        n += 1
        number = int(n * (2 * n - 1))
        maxTerm = number
    return hexagonalNumbers

def search(nTerms):
    triangleNumbers = generateTriangleNumbers(nTerms)
    maxSize = triangleNumbers[-1]
    pentagonalNumbers = generatePentagonalNumbers(maxSize)
    hexagonalNumbers = generateHexagonalNumbers(maxSize)
    inAllThree = []
    for n in triangleNumbers:
        if n in pentagonalNumbers:
            if n in hexagonalNumbers:
                inAllThree.append(n)
    print(inAllThree)

if __name__ == '__main__':
    #print(generatePentagonalNumbers(100))
    search(200000)