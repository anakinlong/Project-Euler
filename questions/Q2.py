"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the
first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the
even-valued terms.
"""

import numpy as np

try:
    import lib
except ModuleNotFoundError:
    from questions import lib


ANSWER = "Answer goes here"


def nth_fibonacci(n: int) -> int:
    """
    Calculate the n-th term of the Fibonacci sequence.

    :param n: which term from the sequence.

    :return: the n-th term of the Fibonacci sequence.
    """
    PHI = (1 + np.sqrt(5)) / 2

    return round((PHI ** n) / np.sqrt(5))


def next_fibonacci(a_1: int, a_2: int) -> int:
    """
    Calculate the next Fibonacci number in the sequence using the previous two.

    :param a_1: the (n - 2)-th value in the sequence.
    :param a_1: the (n - 1)-th value in the sequence.

    :return: the n-th value in the sequence.
    """
    return a_1 + a_2


def fibonacci_list(initial_values: tuple[int, int], max_value: int) -> list[int]:
    """
    Return a list of Fibonacci values from 1 to the last value below a given inclusive maximum value.

    :param initial_values: the first two values of the sequence, in the format (a_1, a_2).
    :param max_value: the maximum allowed value in the list.

    :return: a list of Fibonacci numbers.
    """
    # Initialise the sequence using the initial two values:
    a_1, a_2 = initial_values
    fibonacci_values = [a_1, a_2]

    # Add the next Fibonacci number to the sequence if it does not exceed our maximum value:
    exceeded = False
    next_fibonacci_number = next_fibonacci(a_1, a_2)
    while not exceeded:
        # Add the next value to the list:
        fibonacci_values.append(next_fibonacci_number)

        # Calculate the next value:
        a_2 = a_1
        a_1 = next_fibonacci_number
        next_fibonacci_number = next_fibonacci(a_1, a_2)

        # Check whether it exceeds the limit:
        exceeded = next_fibonacci_number > max_value

    return fibonacci_values


def Fibonacci(maxIncl):
    numbers = [1, 2]
    i = 2
    value = 2
    while value <= maxIncl:
        value = numbers[i-1] + numbers[i-2]
        numbers.append(value)
        i = i + 1
    numbers.pop(-1)
    return(numbers)


def EvenFibonacciSum(maxIncl):
    numbers = Fibonacci(maxIncl)

    sumOfNumbers = 0
    for i in numbers:
        if (i % 2 == 0):
            sumOfNumbers = sumOfNumbers + i

    print(sumOfNumbers)


if __name__ == '__main__':

    print([nth_fibonacci(n) for n in range(20)])
