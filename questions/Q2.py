"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the
first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the
even-valued terms.
"""

try:
    import lib
except ModuleNotFoundError:
    from questions import lib


ANSWER = 4613732


def next_fibonacci(a_1: int, a_2: int) -> int:
    """
    Calculate the next Fibonacci number in the sequence using the previous two.

    :param a_1: the (n - 2)-th value in the sequence.
    :param a_1: the (n - 1)-th value in the sequence.

    :return: the n-th value in the sequence.
    """
    return a_1 + a_2


def fibonacci_list(initial_values: tuple[int, int], max_value: int) -> list[int]:
    """
    Return a list of Fibonacci values from 1 to the last value below a given inclusive maximum value.

    :param initial_values: the first two values of the sequence, in the format (a_1, a_2).
    :param max_value: the maximum allowed value in the list.

    :return: a list of Fibonacci numbers.
    """
    # Initialise the sequence using the initial two values:
    a_1, a_2 = initial_values
    fibonacci_values = [a_1, a_2]

    # Add the next Fibonacci number to the sequence if it does not exceed our maximum value:
    # TODO use something better than a list since appending is slow
    exceeded = False
    next_fibonacci_number = next_fibonacci(a_1, a_2)
    while not exceeded:
        # Add the next value to the list:
        fibonacci_values.append(next_fibonacci_number)

        # Calculate the next value:
        a_2 = a_1
        a_1 = next_fibonacci_number
        next_fibonacci_number = next_fibonacci(a_1, a_2)

        # Check whether it exceeds the limit:
        exceeded = next_fibonacci_number > max_value

    return fibonacci_values


def even_sum(numbers: list[int]) -> int:
    """
    Return the sum of the even numbers in a given list.

    :return: the sum of the even numbers in a given list.
    """
    # Loop through the numbers, decide if each one is even, and add to the total if so:
    total = 0
    for n in numbers:
        if n % 2 == 0:
            total += n

    return total


@lib.profiling.profileit(log_result=True)
def even_fibonacci_sum(max_value: int) -> int:
    """
    Calculate the sum of all the even Fibonacci numbers that do not exceed the given limit.

    :param max_value: the maximum allowed value of the Fibonacci values we are summing.

    :return: the sum of all the even Fibonacci numbers that do not exceed the given limit.
    """
    fibonacci_numbers = fibonacci_list((0, 1), max_value)

    return even_sum(fibonacci_numbers)


if __name__ == '__main__':

    answer = even_fibonacci_sum(4e6)
