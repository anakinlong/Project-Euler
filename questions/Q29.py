"""
Consider all integer combinations of a ^ b for 2 <= a <= 5 and 2 <= b <= 5:

2 ^ 2=4, 2 ^ 3 = 8, 2 ^ 4 = 16, 2 ^ 5 = 32
3 ^ 2 = 9, 3 ^ 3 = 27, 3 ^ 4 = 81, 3 ^ 5 = 243
4 ^ 2 = 16, 4 ^ 3 = 64, 4 ^ 4 = 256, 4 ^ 5 = 1024
5 ^ 2 = 25, 5 ^ 3 = 125, 5 ^ 4 = 625, 5 ^ 5 = 3125

If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct
terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125.

How many distinct terms are in the sequence generated by a ^ b for 2 <= a <= 100 and 2 <= b <= 100?
"""

try:
    import lib
except ModuleNotFoundError:
    from questions import lib


ANSWER = 9183


# TODO runs quickly but not completely satisfied as there is no maths involved in this solution
@lib.profiling.profileit()
def find_unique_terms(a_min: int, a_max: int, b_min: int, b_max: int) -> int:
    """
    Find the number of unique terms generated by a ^ b for all combinations of a and b in their given ranges.

    :param a_min: the minimum (inclusive) value of a.
    :param a_max: the maximum (inclusive) value of a.
    :param b_min: the minimum (inclusive) value of b.
    :param b_max: the maximum (inclusive) value of b.

    :return: the number of unique values produced by a ^ b.
    """
    # Create a list of the set of all values for each value of a:
    terms = [{a ** b for b in range(b_min, b_max + 1)} for a in range(a_min, a_max + 1)]
    # Unify into one set of all unique terms:
    terms = set().union(*terms)

    return len(terms)


if __name__ == '__main__':

    answer = find_unique_terms(2, 100, 2, 100)
