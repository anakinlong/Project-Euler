"""
The four adjacent digits in the 1000-digit number that have the greatest product are 9x9x8x9=5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.
What is the value of this product?
"""

import math

try:
    import lib
except ModuleNotFoundError:
    from questions import lib


ANSWER = 23514624000


NUMBER_AS_STRING = """
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
"""

NUMBER = int(NUMBER_AS_STRING.replace("\n", ""))


@lib.profiling.profileit()
def max_adjacent_product(number: int, adjacent_count: int) -> int:
    """
    Find the maximum adjacent product of strings of digits in a given integer.

    :param number: the integer.
    :param adjacent_count: the number of adjacent digits in each product.

    :return: the maximum adjacent product.
    """
    # Keep track of the largest product we have found:
    max_product = 0
    n_digits = len(str(number))
    number_as_string = str(number)
    # Scan through the number and compute each adjacent product:
    for i in range(0, n_digits - adjacent_count + 1):
        # Compute the adjacent product of this set of digits:
        digits_as_string = number_as_string[i: i + adjacent_count]
        digits = [int(digit) for digit in digits_as_string]
        product_of_digits = math.prod(digits)
        # Set it as our max if it is the largest we have found so far:
        if product_of_digits > max_product:
            max_product = product_of_digits

    return max_product


if __name__ == '__main__':

    answer = max_adjacent_product(NUMBER, 13)
